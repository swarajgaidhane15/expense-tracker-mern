{"version":3,"sources":["components/Header.js","context/AppReducer.jsx","context/GlobalState.js","components/Balance.jsx","components/IncomeExpense.jsx","components/Transaction.jsx","components/TransactionList.jsx","components/AddTransaction.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","response","id","delete","config","headers","post","Provider","value","deleteTransaction","addTransaction","getTransactions","Balance","x","useContext","map","amount","reduce","acc","item","lastThree","toString","substring","length","otherNumbers","total","replace","IncomeExpense","amounts","income","toFixed","expense","className","Transaction","sign","key","text","Math","abs","onClick","TransactionList","useEffect","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50f92954.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <h2>\n            Expense Tracker \n        </h2>\n    )\n}\n\nexport default Header\n","export default (state, action) => {\n    switch(action.type) {\n        case 'GET_TRANSACTIONS': \n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload\n            }\n        case 'DELETE_TRANSACTION':\n            return {\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n            }\n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [...state.transactions, action.payload]\n            }\n        case 'TRANSACTION_ERROR':\n            return {\n                ...state,\n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer } from 'react'\nimport AppReducer from './AppReducer'\nimport axios from 'axios'\n\n//Initial State\nconst initialState = {\n    transactions: [],\n    error: null,\n    loading: true\n}\n\n//create context\nexport const GlobalContext = createContext(initialState);\n\n//Provider Component\nexport const GlobalProvider = ({ children }) => {\n        const [state, dispatch] = useReducer(AppReducer, initialState);\n\n        //Actions\n        async function getTransactions() {\n            try {\n            const res = await axios.get('/api/v1/transactions');\n\n            dispatch({\n                type: 'GET_TRANSACTIONS',\n                payload: res.data.data\n            });\n            } catch (err) {\n                dispatch({\n                    type: 'TRANSACTION_ERROR',\n                    payload: err.response.data.error\n                });\n            }\n        }\n\n        async function deleteTransaction(id) {\n            try {\n                await axios.delete(`/api/v1/transactions/${id}`);\n\n                dispatch({\n                    type: 'DELETE_TRANSACTION',\n                    payload: id\n                })\n            } catch(err) {\n                dispatch({\n                    type: 'TRANSACTION_ERROR',\n                    payload: err.response.data.error\n                });\n            }\n        }\n\n        async function addTransaction(transaction) {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }\n\n            try {\n                const res = await axios.post('/api/v1/transactions', transaction, config)\n                \n                dispatch({\n                    type: 'ADD_TRANSACTION',\n                    payload: res.data.data\n                })\n            } catch (err) {\n                dispatch({\n                    type: 'TRANSACTION_ERROR',\n                    payload: err.response.data.error\n                });\n            }\n\n        }\n\n        return ( <GlobalContext.Provider value = {\n                {\n                    transactions: state.transactions,\n                    error: state.error,\n                    loading: state.loading,\n                    deleteTransaction,\n                    addTransaction,\n                    getTransactions\n                }\n            } > { children } </GlobalContext.Provider>)\n        }","import React, { useContext } from 'react'\nimport {GlobalContext} from '../context/GlobalState';\n\nfunction Balance() {\n\n    const { transactions } = useContext(GlobalContext);\n\n    const amounts = transactions.map(transaction => transaction.amount)\n    var x = amounts.reduce((acc, item) => (acc += item), 0);\n\n    x=x.toString();\n    var lastThree = x.substring(x.length-3);\n    var otherNumbers = x.substring(0,x.length-3);\n    if(otherNumbers !== '')\n        lastThree = ',' + lastThree;\n    var total = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\n\n    return (\n        <div>\n            <h4>Your Balance:</h4>\n            <h1 id=\"balance\">₹ {total}</h1>\n        </div>\n    )\n}\n\nexport default Balance\n","import React, { useContext } from 'react'\nimport {GlobalContext} from '../context/GlobalState';\n\nfunction IncomeExpense() {\n\n    const { transactions } = useContext(GlobalContext);\n\n    const amounts = transactions.map(transaction => transaction.amount)\n    \n    const income = amounts\n        .filter(item => item>0)\n        .reduce((acc, item) => acc += item, 0)\n        .toFixed(2)\n\n    const expense = (amounts\n        .filter(item => item<0)\n        .reduce((acc, item) => acc += item, 0) * -1)\n        .toFixed(2)\n\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n                <h4>Income</h4>\n                <p id=\"money-plus\" className=\"money plus\">₹ {income}</p>\n            </div>\n            <div>\n                <h4>Expense</h4>\n                <p id=\"money-minus\" className=\"money minus\">₹ {expense}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default IncomeExpense\n","import React, { useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nfunction Transaction({transaction}) {\n\n    const { deleteTransaction } = useContext(GlobalContext);\n\n    const sign = transaction.amount < 0 ? '-' : '+';\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'} key={transaction.id}>\n            {transaction.text} \n            <span>{sign} ₹ {Math.abs(transaction.amount)}</span>\n            <button onClick={() => deleteTransaction(transaction._id)} className=\"delete-btn\">x</button>\n        </li>\n    )\n}\n\nexport default Transaction\n","import React, { useContext, useEffect } from 'react'\nimport {GlobalContext} from '../context/GlobalState'\nimport Transaction from './Transaction'\n\nfunction TransactionList() {\n\n    const {transactions, getTransactions} = useContext(GlobalContext);\n\n    useEffect(() => {\n      getTransactions();\n      //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n          <h3>History</h3>\n          <ul id=\"list\" className=\"list\">\n            {transactions.map((transaction) => (\n                <Transaction \n                    key={transaction.id} \n                    transaction={transaction} \n                />\n            ))}\n          </ul>    \n        </>\n    )\n}\n\nexport default TransactionList\n","import React, { useState, useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState'\n\nfunction AddTransaction() {\n\n    const {addTransaction} = useContext(GlobalContext);\n\n    const [text, setText] = useState('')\n    const [amount, setAmount] = useState(0);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        const newTransaction = {\n            id: Math.floor(Math.random() * 100000000),\n            text,\n            amount: +amount\n        }\n\n        addTransaction(newTransaction);\n    }\n\n    return (\n        <>\n            <h3>Add new transaction</h3>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"text\">Text</label>\n                    <input \n                        type=\"text\" \n                        value={text} \n                        onChange={(e) => setText(e.target.value)} \n                        placeholder=\"Enter text...\" \n                    />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"amount\">Amount <br />\n                        (negative - expense, positive - income)</label>\n                    <input \n                        type=\"number\" \n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value)}\n                        placeholder=\"Enter amount...\" \n                    />\n                </div>\n                <button className=\"btn\">Add transaction</button>\n            </form>\n        </>\n    )\n}\n\nexport default AddTransaction\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpense from './components/IncomeExpense';\nimport TransactionList from './components/TransactionList';\nimport AddTransaction from './components/AddTransaction';\n\nimport {GlobalProvider} from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpense />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}